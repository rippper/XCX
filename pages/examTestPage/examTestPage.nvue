<template>
	<view class="examTestPage">
		<view class="etp_time">
			<text>剩余时间: </text><text v-text="minute"></text><text>:</text><text v-text="secound"></text>
		</view>
		<scroll-view scroll-y class="etp_topiclist">
			<exam-topic-item :topicItem="topicList[nowTopicNum - 1]" :nowTopicNum="nowTopicNum" v-model="currentAnswer"></exam-topic-item>
		</scroll-view>
		<view class="etp_topiccontrol">
			<view class="etp_tc_left">
				<view class="etp_tc_btn" v-if="nowTopicNum > 1" @click="storageAnswerPre">
					上一题
				</view>
			</view>
			<view class="etp_tc_middle">
				<text class="etp_tc_middle_nownum" v-text="nowTopicNum"></text> / <text class="etp_tc_middle_allnum" v-text="topicAllNum"></text>
			</view>
			<view class="etp_tc_right">
				<view class="etp_tc_btn" v-if="nowTopicNum < topicAllNum" @click="storageAnswerNext">
					下一题
				</view>
				<view class="etp_tc_btn" v-else-if="nowTopicNum == topicAllNum">
					提交
				</view>
			</view>
		</view>
		<u-modal v-model="show" :content="content" @confirm="goBack" :show-cancel-button="false"></u-modal>
	</view>
</template>

<script>
import { GetExam } from '../../common/getData.js'
import examTopicItem from '../../components/examTopicItem/examTopicItem.nvue'
export default {
	name: 'examTestPage',
	data () {
		return {
			examId: '46',
			Ticket: '', // 考试ticket值
			topicList: '',  // 考题列表
			topicAllNum: 1, // 所有题目总数 
			nowTopicNum: 1, // 当前所答题目序数
			minute: '60',
			secound: '00',
			show: false, // 不可考弹框状态
			content: ''	,// 不可考弹框提示内容
			currentAnswer: '', // 当前答案
			isLoad: false
		}
	},
	onLoad (option) {
		// this.examId = option.Id
	},
	onShow () {
		this.GetExam()
	},
	methods: {
		goBack () {
			uni.navigateBack()
		},
		storageAnswerPre () {
			console.log()
			if (this.currentAnswer) {
				this.$set(this.topicList[this.nowTopicNum - 1], 'Answer', this.currentAnswer)
				// console.log('答案是：' + this.currentAnswer)
				console.log(this.topicList)
				this.currentAnswer = ''
				this.nowTopicNum -= 1
			} else if (this.topicList[this.nowTopicNum - 1].Answer == 'none' && !this.currentAnswer) {
				console.log('答案未填写')
			} else if (this.topicList[this.nowTopicNum - 1].Answer != 'none' && !this.currentAnswer) {
				this.nowTopicNum -= 1
			}
		},
		storageAnswerNext () {
			if (this.currentAnswer) {
				this.$set(this.topicList[this.nowTopicNum - 1], 'Answer', this.currentAnswer)
				// console.log('答案是：' + this.currentAnswer)
				// console.log(this.topicList)
				console.log(this.topicList)
				this.currentAnswer = ''
				this.nowTopicNum += 1
			} else if (this.topicList[this.nowTopicNum - 1].Answer == 'none' && !this.currentAnswer) {
				console.log('答案未填写')
			} else if (this.topicList[this.nowTopicNum - 1].Answer != 'none' && !this.currentAnswer) {
				this.nowTopicNum += 1
			}
		},
		async GetExam () {
			if (this.isLoad) {
				return false
			}
			let msg = await GetExam({
				Id: this.examId
			})
			if (msg.Type == 1) {
				this.isLoad = true
				this.Ticket = msg.Data.Ticket
				msg.Data.ThemeInfoList.forEach((item, index) => {
					if (item.ThemeType === 0) {
						item.ThemeType = '判断题'
					} else if (item.ThemeType === 1) {
						item.ThemeType = '单选题'
					} else if (item.ThemeType === 2) {
						item.ThemeType = '多选题'
					} else if (item.ThemeType === 3) {
						item.ThemeType = '简答题'
					} else if (item.ThemeType === 4) {
						item.ThemeType = '填空题'
						item.ThemeSpace = 0
						let arr = item.ThemeTitle.split("")
						arr.forEach((itemson,indexson) => {
							if (itemson == '@') {
								item.ThemeSpace += 1
								arr.splice(indexson, 1, '_____')
							}
						})
						console.log(arr)
						item.ThemeTitle = arr.join('')
					}
					item.Answer = 'none'
				})
				this.topicAllNum = msg.Data.ThemeInfoList.length
				this.topicList = msg.Data.ThemeInfoList
			} else if (msg.Type === 0) {
				this.content = msg.Message
				this.show = true
			}
			console.log(msg)
		}
	},
	components: {
		examTopicItem
	}
}
</script>

<style lang="scss">
.examTestPage{
	height: 100vh;
	padding-top: 60rpx;
	padding-bottom: 125rpx;
	position: relative;
	.etp_time{
		display: flex;
		flex-direction: row;
		justify-content: center;
		width: 100%;
		height: 60rpx;
		line-height: 60rpx;
		border-bottom: 1rpx solid #a8a8a8;
		font-size: 32rpx;
		background: #fff;
		position: absolute;
		top: 0;
		left: 0;
	}
	.etp_topiclist{
		width: 100%;
		height: 100%;
		background: #fff;
	}
	.etp_topiccontrol{
		display: flex;
		flex-direction: row;
		width: 100%;
		height: 125rpx;
		background: #fff;
		position:  absolute;
		bottom: 0;
		left: 0;
		.etp_tc_left, .etp_tc_right{
			flex: 1;
			position: relative;
			font-size: 32rpx;
		}
		.etp_tc_middle{
			flex: 1;
			height: 100%;
			line-height: 125rpx;
			display: flex;
			flex-direction: row;
			justify-content: center;
			font-size: 32rpx;
		}
		.etp_tc_btn{
			width: 160rpx;
			height: 70rpx;
			line-height: 70rpx;
			text-align: center;
			margin: auto;
			border-radius: 10rpx;
			font-size: 32rpx;
			background: #f00;
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
		}
	}
}
</style>
